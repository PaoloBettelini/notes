#!/bin/bash

snippets_folder="snippets"
pages_folder="pages"
courses_folder="courses"
universes_folder="universes"
latex_folder="latex"

data_folder="../data"
search_folder="latex/packages"
mongourl="mongodb://localhost"

WORKING_DIR=`pwd`

function compile_snippet () {
    echo "Compiling single snippet"

    if [[ "$1" == *.tex ]]; then
        # generate from LaTeX
        echo "Compiling $1"
        tectonic "$1" -Z search-path="$search_folder" > /dev/null

        echo "Generating snippets from $1"
        pdf=$(echo "$1" | sed 's/\.tex$/.pdf/');
        stellar-cli generate snippets \
            --input "$pdf" \
            --data-output "$data_folder" \
            --bottom-offset 9.5 \
            --top-offset=-20 \
            --import \
            --connection-url "$mongourl";

        # You should compile all the snippets before generating PDFs
        #echo "Generating PDF from $1"
        #stellar-cli generate pdf \
        #    --input "$pdf" \
        #    --data "$data_folder" \
        #    --output "$pdf";

        rm "$pdf";
    elif [ -e "$1/Cargo.toml" ]; then
        # Generate from nannou project

        snippet_name=$(basename "$1")
        
        # cleanup old versions
        if [ -e "$1/website/dist/index.js" ]; then
            rm "$1/website/dist/index.js"
        fi
        if [ -e "$data_folder/snippets/$snippet_name" ]; then
            rm -rf "$data_folder/snippets/$snippet_name*"
        fi

        cd "$1"
        # compile using shared folder to cache shared packages
        wasm-pack build

        cd website
        npm install # --dry-run --quiet || npm install # run install only if necessary
        npm run build

        cd "$WORKING_DIR"
        mkdir -p "$data_folder/snippets/$snippet_name"

        # generate snippet folder
        rm "$1/website/dist/index.js"
        mv "$1"/website/dist/* "$data_folder/snippets/$snippet_name"
    elif [[ $1 != *"resources"* && $1 != *"packages"* ]]; then
        # Generate from static files
        echo "Generating from static files"

        snippet_name=$(basename "$1")
        mkdir -p "$data_folder/snippets/$snippet_name"
        cp -r "$1"/* "$data_folder/snippets/$snippet_name"
    fi   
}

function compile_page () {
    echo "Compiling single page"
    mkdir -p "$data_folder/pages"
    cp $1 "$data_folder/pages"
}

function compile_course () {
    echo "Compiling single course"
    mkdir -p "$data_folder/courses"
    cp $1 "$data_folder/courses"
}

function compile_universe () {
    echo "Compiling single universe"
    mkdir -p "$data_folder/universes"
    cp $1 "$data_folder/universes"
}

function compile_snippets () {
    echo "Compiling snippets folder"
    for file in "$snippets_folder"/*; do
        compile_snippet "$file"
    done
}

function compile_latex () {
    echo "Compiling latex folder"
    for file in "$latex_folder"/*; do
        compile_snippet "$file"
    done
}

function compile_pages () {
    echo "Compiling pages folder"
    for file in "$pages_folder"/*; do
        compile_page "$file"
    done
}

function compile_courses () {
    echo "Compiling courses folder"
    for file in "$courses_folder"/*; do
        compile_course "$file"
    done
}

function compile_universes () {
    echo "Compiling universes folder"
    for file in "$universes_folder"/*; do
        compile_universe "$file"
    done
}

function compile () {
    if [[ "$1" == *"$snippets_folder" || "$1" == *"$snippets_folder/" ]]; then
        compile_snippets
    elif [[ "$1" == *"$pages_folder" || "$1" == *"$pages_folder/" ]]; then
        compile_pages
    elif [[ "$1" == *"$latex_folder" || "$1" == *"$latex_folder/" ]]; then
        compile_latex
    elif [[ "$1" == *"$courses_folder" || "$1" == *"$courses_folder/" ]]; then
        compile_courses
    elif [[ "$1" == *"$universes_folder" || "$1" == *"$universes_folder/" ]]; then
        compile_universes
    elif [[ "$1" == *"$snippets_folder/"* || "$1" == *"$latex_folder/"* ]]; then
        compile_snippet $1
    elif [[ "$1" == *"$pages_folder/"* ]]; then
        compile_page $1
    elif [[ "$1" == *"$courses_folder/"* ]]; then
        compile_course $1
    elif [[ "$1" == *"$universes_folder/"* ]]; then
        compile_universe $1
    else
        echo "Argument does not contain any of the specified keywords"
    fi
}

function compile_last_pull () {
    echo "Compiling last pull files"

    # get last pull files files
    output="$(git diff --name-status HEAD@{1}..HEAD)"

    # TODO:
    # git will give various files like
    # - source/folder/file1.html
    # - source/folder/file1.html
    # and the scripts need to compile "source/folder" only once
    # TODO: when the line doesn't start with "D" (delete)

    IFS=$'\n'  # Set the Internal Field Separator to newline
    for line in $output; do
        if [[ $line == *"source/"* ]]; then
            file=$(echo "$line" | sed 's/.*source\///') # remove everything before "source"
            ./compile $file
        fi
    done
}

# Entry point
if [ "$1" = "--help" ]; then
    echo "Usage: $0 <entry>"
    echo "Usage: $0 --last-pull"
elif [ "$1" == "--last-pull" ]; then
    compile_last_pull
elif [ $# -gt 0 ]; then
    compile "$1"
else
    echo "Compiling everything"
    compile_universes
    compile_courses
    compile_pages
    compile_snippets
fi
